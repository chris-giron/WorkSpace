par(old.par)
# TODO: Show how ratings and awards are related
base_breaks <- function(n = 10){
function(x){
axisTicks(log10(range(x, na.rm = TRUE)), log = TRUE, n = n)
}
}
breaks <- axTicks(side = 2)
ggplot(df, aes(x = imdbRating, y = Wins)) +
geom_point(size = 0.7) +
scale_y_continuous(trans = log_trans(), breaks = base_breaks(),
labels = prettyNum) +
geom_smooth() +
labs(title = 'Wins vs User Ratings')
library(ggplot2)
library(GGally)
library(scales)
# TODO: Show how ratings and awards are related
base_breaks <- function(n = 10){
function(x){
axisTicks(log10(range(x, na.rm = TRUE)), log = TRUE, n = n)
}
}
breaks <- axTicks(side = 2)
ggplot(df, aes(x = imdbRating, y = Wins)) +
geom_point(size = 0.7) +
scale_y_continuous(trans = log_trans(), breaks = base_breaks(),
labels = prettyNum) +
geom_smooth() +
labs(title = 'Wins vs User Ratings')
ggplot(df, aes(x = tomatoMeter, y = Wins)) +
geom_point(size = 0.7) +
scale_y_continuous(trans = log_trans(), breaks = base_breaks(),
labels = prettyNum) +
geom_smooth() +
labs(title = 'Wins vs Critic Ratings')
ggplot(df, aes(x = imdbRating, y = Nominations)) +
geom_point(size = 0.7) +
scale_y_continuous(trans = log_trans(), breaks = base_breaks(),
labels = prettyNum) +
geom_smooth() +
labs(title = 'Nominations vs User Ratings')
ggplot(df, aes(x = tomatoMeter, y = Nominations)) +
geom_point(size = 0.7) +
scale_y_continuous(trans = log_trans(), breaks = base_breaks(),
labels = prettyNum) +
geom_smooth() +
labs(title = 'Nominations vs Critic Ratings')
par(old.par)
names(df)
unique(df$Country)
names(df)
unique(df$BoxOffice)
unique(df$Plot)
names(df)
unique(df$DVD)
names(df)
hist(df$Decade)
hist(df$Year)
ggplot(df, aes(x = Year)) +
geom_histogram(bins = 100, color = 'gold', fill = 'black') +
labs(title = 'Year Released Histogram') +
theme(panel.background = element_rect(fill = 'darkturquoise'))
ggplot(df, aes(x = Year)) +
geom_histogram(bins = 50, color = 'gold', fill = 'black') +
labs(title = 'Year Released Histogram') +
theme(panel.background = element_rect(fill = 'darkturquoise'))
ggplot(df, aes(x = Year)) +
geom_histogram(bins = 30, color = 'gold', fill = 'black') +
labs(title = 'Year Released Histogram') +
theme(panel.background = element_rect(fill = 'darkturquoise'))
ggplot(df, aes(x = Year)) +
geom_histogram(bins = 40, color = 'gold', fill = 'black') +
labs(title = 'Year Released Histogram') +
theme(panel.background = element_rect(fill = 'darkturquoise'))
ggplot(df, aes(x = Year)) +
geom_histogram(bins = 30, color = 'gold', fill = 'black') +
labs(title = 'Year Released Histogram') +
theme(panel.background = element_rect(fill = 'darkturquoise'))
boxplot(df$Year, main = 'Year Released Box Plot')
ggplot(df, aes(x = Year)) +
geom_histogram(bins = 30, color = 'gold', fill = 'black') +
labs(title = 'Year Released Histogram') +
theme(panel.background = element_rect(fill = 'darkturquoise'))
# TODO: Find and illustrate two expected insights
ggplot(df, aes(x = Year)) +
geom_histogram(bins = 30, color = 'gold', fill = 'black') +
labs(title = 'Year Released Histogram') +
theme(panel.background = element_rect(fill = 'darkturquoise'))
# TODO: Find and illustrate two expected insights
ggplot(df, aes(x = Year)) +
geom_histogram(bins = 30, color = 'gold', fill = 'black') +
labs(title = 'Year Released Histogram') +
theme(panel.background = element_rect(fill = 'darkturquoise'))
# TODO: Find and illustrate one unexpected insight
ggplot(df, aes(x = Year)) +
geom_histogram(bins = 30, color = 'gold', fill = 'black') +
labs(title = 'Year Released Histogram') +
theme(panel.background = element_rect(fill = 'darkturquoise'))
names(df)
unique(df$Metascore)
unique(df$Poster)
names(df)
unique(df$Language)
names(df)
unique(df$Rated)
sum(df$Rated == "PG")
sum(df$Rated == "G" || df$Rated == "PG" || df$Rated == "PG-13" || df$Rated == "R")
sum(df$Rated == "G" | df$Rated == "PG" | df$Rated == "PG-13" | df$Rated == "R")
Rate_ind = df$Rated == "G" | df$Rated == "PG" | df$Rated == "PG-13" | df$Rated == "R"
Rate = df[Rate_ind]
Rate = df[Rate_ind,]
ggplot(Rate, aes(x = Rated, y = Runtime)) +
geom_boxplot()
help(round)
print(paste("Percentage of movies with popular ratings (G, PG, PG-13, R) from original movie dataset =",
round(sum_popRatings/dim(df_3)[1], 3)*100, "%"))
# TODO: Find and illustrate two expected insights
# Popularly known ratings
sum_popRatings = sum(df_3$Rated == "G" | df_3$Rated == "PG" | df_3$Rated == "PG-13" | df_3$Rated == "R")
Rate_ind = df_3$Rated == "G" | df_3$Rated == "PG" | df_3$Rated == "PG-13" | df_3$Rated == "R"
Rate = df_3[Rate_ind,]
ggplot(Rate, aes(x = Rated, y = Runtime)) +
geom_boxplot()
print(paste("Percentage of movies with popular ratings (G, PG, PG-13, R) from original movie dataset =",
round(sum_popRatings/dim(df_3)[1], 3)*100, "%"))
ggplot(Rate, aes(x = Rated, y = Year)) +
geom_boxplot()
# TODO: Find and illustrate two expected insights
# Popularly known ratings
sum_popRatings = sum(df_3$Rated == "G" | df_3$Rated == "PG" | df_3$Rated == "PG-13" | df_3$Rated == "R")
Rate_ind = df_3$Rated == "G" | df_3$Rated == "PG" | df_3$Rated == "PG-13" | df_3$Rated == "R"
Rate = df_3[Rate_ind,]
ggplot(Rate, aes(x = Rated, y = Runtime, fill = Rated)) +
geom_boxplot() +
ylim(0,250) +
labs(title('Runtime vs Popularly Rated Distribution Box Plots'))
# TODO: Find and illustrate two expected insights
# Popularly known ratings
sum_popRatings = sum(df_3$Rated == "G" | df_3$Rated == "PG" | df_3$Rated == "PG-13" | df_3$Rated == "R")
Rate_ind = df_3$Rated == "G" | df_3$Rated == "PG" | df_3$Rated == "PG-13" | df_3$Rated == "R"
Rate = df_3[Rate_ind,]
ggplot(Rate, aes(x = Rated, y = Runtime, fill = Rated)) +
geom_boxplot() +
ylim(0,250) +
labs(title = 'Runtime vs Popularly Rated Distribution Box Plots')
print(paste("Percentage of movies with popular ratings (G, PG, PG-13, R) from original movie dataset =",
round(sum_popRatings/dim(df_3)[1], 3)*100, "%"))
ggplot(Rate, aes(x = Rated, y = Year, fill = Rated)) +
geom_boxplot() +
ylim(0,250) +
labs(title = 'Year vs Popularly Rated Distribution Box Plots')
ggplot(Rate, aes(x = Rated, y = Year, fill = Rated)) +
geom_boxplot() +
#ylim(0,250) +
labs(title = 'Year vs Popularly Rated Distribution Box Plots')
ggplot(Rate, aes(x = Rated, y = Year, fill = Rated)) +
geom_boxplot() +
labs(title = 'Year vs Popularly Rated Distribution Box Plots')
# TODO: Find and illustrate two expected insights
# Popularly known ratings
sum_popRatings = sum(df_3$Rated == "G" | df_3$Rated == "PG" | df_3$Rated == "PG-13" | df_3$Rated == "R")
Rate_ind = df_3$Rated == "G" | df_3$Rated == "PG" | df_3$Rated == "PG-13" | df_3$Rated == "R"
Rate = df_3[Rate_ind,]
ggplot(Rate, aes(x = Rated, y = Gross, fill = Rated)) +
geom_boxplot() +
ylim(0,250) +
labs(title = 'Runtime vs Popularly Rated Distribution Box Plots')
print(paste("Percentage of movies with popular ratings (G, PG, PG-13, R) from original movie dataset =",
round(sum_popRatings/dim(df_3)[1], 3)*100, "%"))
# TODO: Find and illustrate two expected insights
# Popularly known ratings
sum_popRatings = sum(df_3$Rated == "G" | df_3$Rated == "PG" | df_3$Rated == "PG-13" | df_3$Rated == "R")
Rate_ind = df_3$Rated == "G" | df_3$Rated == "PG" | df_3$Rated == "PG-13" | df_3$Rated == "R"
Rate = df_3[Rate_ind,]
ggplot(Rate, aes(x = Rated, y = Gross, fill = Rated)) +
geom_boxplot() +
#ylim(0,250) +
labs(title = 'Runtime vs Popularly Rated Distribution Box Plots')
print(paste("Percentage of movies with popular ratings (G, PG, PG-13, R) from original movie dataset =",
round(sum_popRatings/dim(df_3)[1], 3)*100, "%"))
# TODO: Find and illustrate two expected insights
# Popularly known ratings
sum_popRatings = sum(df_3$Rated == "G" | df_3$Rated == "PG" | df_3$Rated == "PG-13" | df_3$Rated == "R")
Rate_ind = df_3$Rated == "G" | df_3$Rated == "PG" | df_3$Rated == "PG-13" | df_3$Rated == "R"
Rate = df_3[Rate_ind,]
ggplot(Rate, aes(x = Rated, y = Gross, fill = Rated)) +
geom_boxplot() +
ylim(0,5e8) +
labs(title = 'Runtime vs Popularly Rated Distribution Box Plots')
print(paste("Percentage of movies with popular ratings (G, PG, PG-13, R) from original movie dataset =",
round(sum_popRatings/dim(df_3)[1], 3)*100, "%"))
unique(df$Rated)
# TODO: Find and illustrate two expected insights
# Popularly known ratings
sum_popRatings = sum(df_3$Rated == "G" | df_3$Rated == "PG" | df_3$Rated == "PG-13" | df_3$Rated == "R")
Rate_ind = df_3$Rated == "G" | df_3$Rated == "PG" | df_3$Rated == "PG-13" | df_3$Rated == "R"
Rate = df_3[Rate_ind,]
ggplot(Rate, aes(x = Rated, y = Gross, fill = Rated)) +
geom_boxplot() +
ylim(0,5e8) +
labs(title = 'Gross vs Popularly Rated Distribution Box Plots')
ggplot(Rate, aes(x = Rated, y = Runtime, fill = Rated)) +
geom_boxplot() +
ylim(0,250) +
labs(title = 'Runtime vs Popularly Rated Distribution Box Plots')
print(paste("Percentage of movies with popular ratings (G, PG, PG-13, R) from original movie dataset =",
round(sum_popRatings/dim(df_3)[1], 3)*100, "%"))
# TODO: Find and illustrate two expected insights
# Popularly known ratings
sum_popRatings = sum(df$Rated == "G" | df$Rated == "PG" | df$Rated == "PG-13" | df$Rated == "R")
Rate_ind = df$Rated == "G" | df$Rated == "PG" | df$Rated == "PG-13" | df$Rated == "R"
Rate = df[Rate_ind,]
ggplot(Rate, aes(x = Rated, y = Gross, fill = Rated)) +
geom_boxplot() +
ylim(0,5e8) +
labs(title = 'Gross vs Popularly Rated Distribution Box Plots')
ggplot(Rate, aes(x = Rated, y = Runtime, fill = Rated)) +
geom_boxplot() +
ylim(0,250) +
labs(title = 'Runtime vs Popularly Rated Distribution Box Plots')
print(paste("Percentage of movies with popular ratings (G, PG, PG-13, R) from original movie dataset =",
round(sum_popRatings/dim(df_3)[1], 3)*100, "%"))
ggplot(Rate, aes(x = Rated, y = Year, fill = Rated)) +
geom_boxplot() +
labs(title = 'Year vs Popularly Rated Distribution Box Plots')
ggplot(Rate, aes(x = Rated, y = Year, fill = Rated)) +
geom_boxplot() +
labs(title = 'Year vs Popularly Rated Distribution Box Plots')
ggplot(Rate, aes(x = Year, y = Wins, fill = Rated)) +
geom_point() +
labs(title = 'Wins vs Year (Rated)')
ggplot(Rate, aes(x = Rated, y = Year, fill = Rated)) +
geom_boxplot() +
labs(title = 'Year vs Popularly Rated Distribution Box Plots')
ggplot(Rate, aes(x = Year, y = Wins, color = Rated)) +
geom_point() +
labs(title = 'Wins vs Year (Rated)')
ggplot(Rate, aes(x = Rated, y = Year, fill = Rated)) +
geom_boxplot() +
labs(title = 'Year vs Popularly Rated Distribution Box Plots')
ggplot(Rate, aes(x = Year, y = Wins, color = Rated)) +
geom_point(size = 0.7) +
labs(title = 'Wins vs Year (Rated)')
ggplot(Rate, aes(x = Rated, y = Year, fill = Rated)) +
geom_boxplot() +
labs(title = 'Year vs Popularly Rated Distribution Box Plots')
ggplot(Rate, aes(x = Year, y = Wins, color = Rated)) +
geom_point(size = 0.7) +
xlim(1950, 2017) +
labs(title = 'Wins vs Year (Rated)')
ggplot(Rate, aes(x = Rated, y = Year, fill = Rated)) +
geom_boxplot() +
labs(title = 'Year vs Popularly Rated Distribution Box Plots')
ggplot(Rate, aes(x = Year, y = Wins, color = Rated)) +
geom_point(size = 0.7) +
scale_y_continuous(trans = log_trans(), breaks = base_breaks(),
labels = prettyNum) +
xlim(1950, 2017) +
labs(title = 'Wins vs Year (Rated)')
require(ggplot2);library(plyr);library(robustHD);library(MASS);library(reshape2)
help("quakes")
data("quakes")
names(quakes)
ggplot(quakes, aes(x = long, y = lat, size = mag)) +
geom_point()
ggplot(quakes, aes(x = long, y = lat, color = mag, size = mag)) +
geom_point()
ggplot(quakes, aes(x = long, y = lat, color = mag)) +
geom_point()
ggplot(quakes, aes(x = long, y = lat, color = mag)) +
geom_point() +
scale_colour_gradient(low = 'red', high = 'blue')
ggplot(quakes, aes(x = long, y = lat, color = mag, size = mag)) +
geom_point() +
scale_colour_gradient(low = 'red', high = 'blue')
names(quakes)
ggplot(quakes, aes(x = long, y = lat, color = stations, size = stations)) +
geom_point() +
scale_colour_gradient(low = 'red', high = 'blue')
ggplot(quakes, aes(x = long, y = lat, color = depth, size = depth)) +
geom_point() +
scale_colour_gradient(low = 'red', high = 'blue')
sum(quakes$depth = 600)
sum(quakes$depth == 600)
sum(quakes$depth == 400)
unique(quakes$depth)
ggplot(quakes, aes(x = long, y = lat, color = depth)) +
geom_point(size = 2) +
scale_colour_gradient(low = 'red', high = 'blue')
ggplot(quakes, aes(x = long, y = lat, color = depth)) +
geom_point(size = 3) +
scale_colour_gradient(low = 'red', high = 'blue')
sum(quakes$depth >= 400)
deep_ind = (quakes$depth >= 400)
deep = quakes[deep_ind,]
ggplot(deep, aes(x = long, y = lat, color = depth)) +
geom_point(size = 3) +
xlim(165,190) + ylim(-40,-10) +
scale_colour_gradient(low = 'red', high = 'blue')
deep_ind = (quakes$depth >= 500)
deep = quakes[deep_ind,]
ggplot(deep, aes(x = long, y = lat, color = depth)) +
geom_point(size = 3) +
xlim(165,190) + ylim(-40,-10) +
scale_colour_gradient(low = 'red', high = 'blue')
ggplot(deep, aes(x = long, y = lat, color = depth)) +
geom_point(size = 3) +
geom_smooth() +
xlim(165,190) + ylim(-40,-10) +
scale_colour_gradient(low = 'red', high = 'blue')
mean(deep$lat > -28 & deep$lat < -12)
mean(deep$lat > -28 & deep$lat < -12 & deep$long > 167 & deep$long < 185)
mean(quakes$lat > -28 & quakes$lat < -12 & quakes$long > 167 & quakes$long < 185)
mean(deep$lat > -28 & deep$lat < -16 & deep$long > 177 & deep$long < 184)
mean(quakes$lat > -28 & quakes$lat < -16 & quakes$long > 177 & quakes$long < 184)
mean(deep$lat > -28 & deep$lat < -16 & deep$long > 178 & deep$long < 184)
mean(quakes$lat > -28 & quakes$lat < -16 & quakes$long > 178 & quakes$long < 184)
mean(quakes$lat > -28 & quakes$lat < -16 & quakes$long > 179 & quakes$long < 184)
mean(deep$lat > -28 & deep$lat < -16 & deep$long > 179 & deep$long < 184)
mean(quakes$lat > -28 & quakes$lat < -16 & quakes$long > 178 & quakes$long < 184)
mean(deep$lat > -28 & deep$lat < -16 & deep$long > 178 & deep$long < 184)
mean(quakes$lat > -28 & quakes$lat < -16 & quakes$long > 178 & quakes$long < 183)
mean(deep$lat > -28 & deep$lat < -16 & deep$long > 178 & deep$long < 183)
mean(deep$lat > -27 & deep$lat < -16 & deep$long > 178 & deep$long < 183)
mean(quakes$lat > -27 & quakes$lat < -16 & quakes$long > 178 & quakes$long < 183)
mean(deep$lat > -26 & deep$lat < -16 & deep$long > 178 & deep$long < 183)
mean(quakes$lat > -26 & quakes$lat < -16 & quakes$long > 178 & quakes$long < 183)
mean(quakes$lat > -27 & quakes$lat < -16 & quakes$long > 178 & quakes$long < 183)
mean(deep$lat > -27 & deep$lat < -16 & deep$long > 178 & deep$long < 183)
mean(quakes$lat > -27 & quakes$lat < -17 & quakes$long > 178 & quakes$long < 183)
mean(deep$lat > -27 & deep$lat < -17 & deep$long > 178 & deep$long < 183)
mean(quakes$lat > -27 & quakes$lat < -18 & quakes$long > 178 & quakes$long < 183)
mean(deep$lat > -27 & deep$lat < -18 & deep$long > 178 & deep$long < 183)
mean(quakes$lat > -27 & quakes$lat < -17 & quakes$long > 178 & quakes$long < 183)
mean(deep$lat > -27 & deep$lat < -17 & deep$long > 178 & deep$long < 183)
require(ggplot2);library(plyr);library(robustHD);library(MASS);library(reshape2)
data("quakes")
ggplot(quakes, aes(x = long, y = lat, color = depth)) +
geom_point(size = 3) +
xlim(165,190) + ylim(-40,-10) +
scale_colour_gradient(low = 'red', high = 'blue')
mean(quakes$lat > -27 & quakes$lat < -17 & quakes$long > 178 & quakes$long < 183)
deep_ind = (quakes$depth >= 500)
deep = quakes[deep_ind,]
mean(deep$lat > -27 & deep$lat < -17 & deep$long > 178 & deep$long < 183)
ggplot(deep, aes(x = long, y = lat, color = depth)) +
geom_point(size = 3) +
xlim(165,190) + ylim(-40,-10) +
scale_colour_gradient(low = 'red', high = 'blue')
require(ggplot2);library(plyr);library(robustHD);library(MASS);library(reshape2)
data("quakes")
ggplot(quakes, aes(x = long, y = lat, color = depth)) +
geom_point(size = 3) +
xlim(165,190) + ylim(-40,-10) +
scale_colour_gradient(low = 'red', high = 'blue')
mean(quakes$lat > -27 & quakes$lat < -17 & quakes$long > 178 & quakes$long < 183)
deep_ind = (quakes$depth >= 500)
deep = quakes[deep_ind,]
mean(deep$lat > -27 & deep$lat < -17 & deep$long > 178 & deep$long < 183)
require(MASS); require(ggplot2); library(scales); library(plyr);library(robustHD);library(reshape2)
hdfsPerf = read.csv("MapReduceJobPerformance.csv", header = TRUE)
names(hdfsPerf)
ggplot(hdfsPerf, aes(x = PERC_MEM_ALLOCATION, y = PERC_GC_TIME)) +
geom_point(size = 0.7) +
xlim(0,1) + ylim(0,0.5) +
labs(title = 'Fraction of time in GC vs. Fraction memory used',
x = 'Fraction memory used', y = 'Fraction of time in GC')
mean(hdfsPerf$PERC_GC_TIME > 0.2)
ggplot(hdfsPerf, aes(x = PERC_MEM_ALLOCATION, y = PERC_GC_TIME)) +
geom_point(size = 0.7, color = 'blue') +
xlim(0,1) + ylim(0,0.5) +
labs(title = 'Fraction of time in GC vs. Fraction memory used',
x = 'Fraction memory used', y = 'Fraction of time in GC')
ggplot(hdfsPerf, aes(x = PERC_MEM_ALLOCATION, y = PERC_GC_TIME)) +
geom_point(size = 0.6, color = 'blue') +
xlim(0,1) + ylim(0,0.5) +
labs(title = 'Fraction of time in GC vs. Fraction memory used',
x = 'Fraction memory used', y = 'Fraction of time in GC')
percPoorGC = round(mean(hdfsPerf$PERC_GC_TIME > 0.2),4) * 100
percPoorMem = round(mean(hdfsPerf$PERC_MEM_ALLOCATION > 0.9),4) * 100
ggplot(hdfsPerf, aes(x = PERC_MEM_ALLOCATION, y = PERC_GC_TIME)) +
geom_point(size = 0.6, color = 'blue') +
xlim(0,1) + ylim(0,0.5) +
labs(title = 'Fraction of time in GC vs. Fraction memory used',
x = paste('Fraction memory used (', percPoorMem, '% Poor Performing)'),
y = paste('Fraction of time in GC (', percPoorGC, '% Poor Performing)'))
help(paste)
ggplot(hdfsPerf, aes(x = PERC_MEM_ALLOCATION, y = PERC_GC_TIME)) +
geom_point(size = 0.6, color = 'blue') +
xlim(0,1) + ylim(0,0.5) +
labs(title = 'Fraction of time in GC vs. Fraction memory used',
x = paste('Fraction memory used (', percPoorMem, '% Poor Performing)', sep = ''),
y = paste('Fraction of time in GC (', percPoorGC, '% Poor Performing)', sep = ''))
ggplot(hdfsPerf, aes(x = PERC_MEM_ALLOCATION, y = PERC_GC_TIME)) +
geom_point(size = 0.6, color = 'blue') +
geom_vline(xintercept = 0.9, color = 'red') +
geom_hline(yintercept = 0.2, color = 'red') +
xlim(0,1) + ylim(0,0.5) +
labs(title = 'Fraction of time in GC vs. Fraction memory used',
x = paste('Fraction memory used (', percPoorMem, '% Poor Performing)', sep = ''),
y = paste('Fraction of time in GC (', percPoorGC, '% Poor Performing)', sep = ''))
names(hdfsPerf)
ggplot(hdfsPerf, aes(x = PERC_CPU_USAGE)) +
geom_histogram(binwidth = 0.2, color = 'blue') +
labs(title = 'Used CPU / Allocated CPU', x = 'Used CPU / Allocated CPU')
ggplot(hdfsPerf, aes(x = PERC_CPU_USAGE)) +
geom_histogram(binwidth = 0.2, fill = 'blue', color = 'white') +
labs(title = 'Used CPU / Allocated CPU', x = 'Used CPU / Allocated CPU')
ggplot(hdfsPerf, aes(x = PERC_CPU_USAGE)) +
geom_histogram(binwidth = 0.2, fill = 'blue', color = 'white') +
xlim(0,5) +
labs(title = 'Used CPU / Allocated CPU', x = 'Used CPU / Allocated CPU')
ggplot(hdfsPerf, aes(x = PERC_CPU_USAGE)) +
geom_histogram(binwidth = 0.2, fill = 'blue', color = 'white') +
xlim(0,5) +
labs(title = 'Used CPU / Allocated CPU', x = 'Used CPU / Allocated CPU', y = '')
ggplot(hdfsPerf, aes(x = PERC_CPU_USAGE)) +
geom_histogram(binwidth = 0.2, fill = 'blue', color = 'white') +
xlim(0,5) + ylim(0,100) +
labs(title = 'Used CPU / Allocated CPU', x = 'Used CPU / Allocated CPU', y = '')
ggplot(hdfsPerf, aes(x = PERC_CPU_USAGE)) +
geom_histogram(binwidth = 0.2, fill = 'blue', color = 'white') +
xlim(0,5) +
labs(title = 'Used CPU / Allocated CPU', x = 'Used CPU / Allocated CPU', y = '')
percPoorCPU = round(mean(hdfsPerf$PERC_CPU_USAGE > 2),4) * 100
percPoorGC = round(mean(hdfsPerf$PERC_GC_TIME >= 0.2),4) * 100
percPoorMem = round(mean(hdfsPerf$PERC_MEM_ALLOCATION >= 0.9),4) * 100
percPoorCPU = round(mean(hdfsPerf$PERC_CPU_USAGE >= 2),4) * 100
ggplot(hdfsPerf, aes(x = PERC_MEM_ALLOCATION, y = PERC_GC_TIME)) +
geom_point(size = 0.6, color = 'blue') +
geom_vline(xintercept = 0.9, color = 'red') +
geom_hline(yintercept = 0.2, color = 'red') +
xlim(0,1) + ylim(0,0.5) +
labs(title = 'Fraction of time in GC vs. Fraction memory used',
x = paste('Fraction memory used (', percPoorMem, '% Poor Performing)', sep = ''),
y = paste('Fraction of time in GC (', percPoorGC, '% Poor Performing)', sep = ''))
ggplot(hdfsPerf, aes(x = PERC_CPU_USAGE)) +
geom_histogram(binwidth = 0.2, fill = 'blue', color = 'white') +
xlim(0,5) +
labs(title = 'Used CPU / Allocated CPU',
x = paste('Used CPU / Allocated CPU (', percPoorCPU, '% Poor Usage)', sep = ''),
y = '')
require(MASS); require(ggplot2); library(scales); library(plyr);library(robustHD);library(reshape2)
hdfsPerf = read.csv("MapReduceJobPerformance.csv", header = TRUE)
percPoorGC = round(mean(hdfsPerf$PERC_GC_TIME >= 0.2),4) * 100
percPoorMem = round(mean(hdfsPerf$PERC_MEM_ALLOCATION >= 0.9),4) * 100
percPoorCPU = round(mean(hdfsPerf$PERC_CPU_USAGE >= 2),4) * 100
ggplot(hdfsPerf, aes(x = PERC_MEM_ALLOCATION, y = PERC_GC_TIME)) +
geom_point(size = 0.6, color = 'blue') +
geom_vline(xintercept = 0.9, color = 'red') +
geom_hline(yintercept = 0.2, color = 'red') +
xlim(0,1) + ylim(0,0.5) +
labs(title = 'Fraction of time in GC vs. Fraction memory used',
x = paste('Fraction memory used (', percPoorMem, '% Poor Performing)', sep = ''),
y = paste('Fraction of time in GC (', percPoorGC, '% Poor Performing)', sep = ''))
ggplot(hdfsPerf, aes(x = PERC_CPU_USAGE)) +
geom_histogram(binwidth = 0.2, fill = 'blue', color = 'white') +
xlim(0,5) +
labs(title = 'Used CPU / Allocated CPU',
x = paste('Used CPU / Allocated CPU (', percPoorCPU, '% Poor Usage)', sep = ''),
y = '')
ggplot(hdfsPerf, aes(x = PERC_CPU_USAGE)) +
geom_histogram(binwidth = 0.2, fill = 'blue', color = 'white') +
xlim(1,5) +
labs(title = 'Used CPU / Allocated CPU',
x = paste('Used CPU / Allocated CPU (', percPoorCPU, '% Poor Usage)', sep = ''),
y = '')
ggplot(hdfsPerf, aes(x = PERC_CPU_USAGE)) +
geom_histogram(binwidth = 0.2, fill = 'blue', color = 'white') +
xlim(1.2,5) +
labs(title = 'Used CPU / Allocated CPU',
x = paste('Used CPU / Allocated CPU (', percPoorCPU, '% Poor Usage)', sep = ''),
y = '')
ggplot(hdfsPerf, aes(x = PERC_CPU_USAGE)) +
geom_histogram(binwidth = 0.2, fill = 'blue', color = 'white') +
xlim(1.8,5) +
labs(title = 'Used CPU / Allocated CPU',
x = paste('Used CPU / Allocated CPU (', percPoorCPU, '% Poor Usage)', sep = ''),
y = '')
ggplot(hdfsPerf, aes(x = PERC_CPU_USAGE)) +
geom_histogram(binwidth = 0.2, fill = 'blue', color = 'white') +
xlim(1.6,5) +
labs(title = 'Used CPU / Allocated CPU',
x = paste('Used CPU / Allocated CPU (', percPoorCPU, '% Poor Usage)', sep = ''),
y = '')
ggplot(hdfsPerf, aes(x = PERC_CPU_USAGE)) +
geom_histogram(binwidth = 0.2, fill = 'blue', color = 'white') +
xlim(1.6,5) +
labs(title = 'Used CPU / Allocated CPU ( >1.6 )',
x = paste('Used CPU / Allocated CPU (', percPoorCPU, '% Poor Usage)', sep = ''),
y = '')
ggplot(hdfsPerf, aes(x = PERC_MEM_ALLOCATION, y = PERC_GC_TIME)) +
geom_point(size = 0.6, color = 'blue') +
geom_vline(xintercept = 0.9, color = 'red') +
geom_hline(yintercept = 0.2, color = 'red') +
xlim(0,1) + ylim(0,0.5) +
labs(title = 'Fraction of time in GC vs. Fraction memory used',
x = paste('Fraction memory used (', percPoorMem, '% Poor Performing)', sep = ''),
y = paste('Fraction of time in GC (', percPoorGC, '% Poor Performing)', sep = ''))
ggplot(hdfsPerf, aes(x = PERC_CPU_USAGE)) +
geom_histogram(binwidth = 0.2, fill = 'blue', color = 'white') +
xlim(0,5) +
labs(title = 'Used CPU / Allocated CPU',
x = paste('Used CPU / Allocated CPU (', percPoorCPU, '% Poor Usage)', sep = ''),
y = '')
ggplot(hdfsPerf, aes(x = PERC_CPU_USAGE)) +
geom_histogram(binwidth = 0.2, fill = 'blue', color = 'white') +
xlim(1.6,5) +
labs(title = 'Used CPU / Allocated CPU ( >1.6 )',
x = paste('Used CPU / Allocated CPU (', percPoorCPU, '% Poor Usage)', sep = ''),
y = '')
